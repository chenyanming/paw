#+title: paw (point-and-write)

#+html: <img src="images/logo.jpg" width="256" height="256">

Study for a life in Emacs.

~paw.el~ was created in 2021 as an annotation tool, but I was not used it a lot at that time. Recently I picked it up and dramatically changed its usage. Now it is a complete solution of making annotations and language learning tools, right inside Emacs.

paw relies on sqlite. All annotations are saved inside a database, which means it can be easily backup and you can read and make annotation right inside Emacs (PC/mobile) using same database.

paw is not just a dictionary tool. paw was created in mind that:
1. Query word with single mouse click, even no need to click.
2. Save and trace all known/unknown words and wordlist support, online or offline.
3. Integrate with other great open source tools, libraries, and dictionaries.
4. Integrate with external dictionary tools.
5. Support many languages.
6. Multi-Platform Support, including Mobile/e-link devices.
7. Use AI as assistant.

#+begin_quote
The standout feature of Paw is the ability to scan an entire buffer, tokenize all words, batch-query them, and filter them out according to user-provided tags, ultimately applying overlays alongside meanings to all discovered words. In essence, Paw proactively queries the dictionary on your behalf, making the highlighted word's meaning immediately available.

This means that you can simply hover your mouse over a word to view its definition, without having to click on it.
#+end_quote

This package is mainly used along with:
1. nov-mode
2. org-mode
3. eaf-mode
4. eww-mode
5. wallabag-entry-mode
6. pdf-view-mode
7. elfeed-show-entry-mode
8. [[Browser support]]

But it is able to work with all modes (defined in ~paw-annotation-mode-supported-modes~) in Emacs.

* What can paw do?
** Reading and annotation
1. Open an epub file using nov.el or open an org file or browse web with eww
2. Enable ~paw-annotation-mode~ (buffer will be turned into read-only if
   ~paw-annotation-read-only-enable~ is t to avoid accidental alternation)
3. Use ~paw~ add word/highlight/bookmark/todo/, for example, ~paw-add-word~,
   ~paw-add-highlight~... Please check M-x ~paw-add-*~ related commands for all
   type of supported annotations.
4. Annotations will be highlighted via overlay. Under the annotation, you can do
   various of operations. For example, to edit the annotation, under the
   annotation, press ~i~, ~paw-find-note~. It will create an temporary org file
   dedicated for this annotation, then save by ~C-c C-c~, changes will be saved in
   the database respectively.
5. Call ~paw~, ~paw-list-annotations~, ~paw-list-all-annotations~ or ~paw-list-all-links~ to manage or jump to
   annotation location (One useful case is that make highlight or create
   bookmark on ~eww~, and jump back to the exact same annotation location simply
   pressing Enter)
6. Under the annotation, M-x ~paw-view-notes~, all notes under the same path will
   be shown, giving you an overview on all notes you've made for the same file.
   Or M-x ~paw-find-notes~ to update/save all notes under the same path into an
   org file under ~paw-note-dir~, and jump to the annotation location inside the
   org file.
7. ~paw-add-bookmark~ works great on eww-mode/eaf-mode (browser or pdf-viewer)

** Language Learning
1. Copy a text you want to learn to an org file or browse a page with eww.
2. Enable ~paw-annotation-mode~
3. Click/Select word/sentence with ~paw-view-note~, it will show you an
   informative buffer of the word/sentence. It has dictionary, translation,
   notes and also able to search by external browser.
4. Use ~paw-add-offline-word~ or ~paw-add-online-word~ to add a new word. For Online
   words, please check 
#+html: <a href="#anki-integration">Anki Integration</a>
#+html: <a href="#eudic-integration">Eudic Integration</a>
   All offline/online words appeared on any buffers that were enabled
   ~paw-annoation-mode~ will be highlighted, useful for language learners using
   the important method: Repetition.
5. For offline words, please setup ~paw-offline-studylist~ before using it. By
   default we have two offline studylists: =English Studylist= and =Japanese
   Studylist=.
6. You can also use ~paw-add-word~. Unlike offline/online word, the word added by
   ~paw-add-word~ is linked with an unique id, it is only highlighted at the
   location where we added it.
7. Under any annotation, click or press ~v~ to invoke ~paw-view-note~, a buffer
   with saved meanings, dictionary, translation, notes is shown.
8. Under any annotation, click or press ~c~ to invoke
   ~paw-change-word-learning-level~, select from level 1~5. 1~4 are controlled by
   ~paw-level-1-word-face~ to ~paw-level-4-word-face~ for online words,
   ~paw-level-1-offline-word-face~ to ~paw-level-4-offline-word-face~ for offline
   words, while 5 is considered as Known word, skipping adding overlay face
   (just hiding). You can change the word to level 5 while keep it hiding, but
   if you don't need it anymore, simply run =paw-delete-annotation= to delete it.
9. Click/Select word/sentence with ~paw-view-note-current-thing~,
   ~paw-view-note-next-thing~, ~paw-view-note-prev-thing~, it will do segmentation
   using [[https://github.com/ikawaha/kagome][kagome]] (Japanese), and [[https://github.com/skywind3000/ECDICT][ECDICT]] (English).
10. Check https://www.lingq.com/en/, you know more ideas how to learn a foreign
    language with ~paw.el~.
11. Run ~paw-export-notes-to-csv~, check the csv file under ~paw-csv-file~, import it
    to [[https://apps.ankiweb.net/][Anki]] for further studying.
12. Both ~paw-add-word~ and ~paw-add-online-word~ will capture the context sentence
    and save it into Notes field.

Tip: Find some interesting contents on LingQ, and browse using eww, enable
~paw-annotation-mode~, enjoy language studying!



** Search a word/sentence
1. Select/Under a word/sentence
2. Run ~paw-view-note~ (no segmentation, good for word) or
   ~paw-view-note-current-thing~ (segmentation, good for sentence)
3. Optimized for eaf-mode, nov-mode, eww-mode, focus-mode


* Installation
You should install the following Dependencies if you want to make use all the power of paw:

- Command line tools
  - [[https://github.com/Dushistov/sdcv][sdcv]] (external dictionary)
  - mpv (or other command line mp3 player)
  - [[https://github.com/goldendict/goldendict][goldendict]] (external dictionary)
  - [[https://github.com/rany2/edge-tts/][edge-tts]] (pronunciation)
  - [[https://github.com/ikawaha/kagome][kagome]] (For Japanese segmentation, and word detection when click)

- python dependencies (install paw command line by ~pip install emacs-paw~ or one by one manually):
  - Python itself (3.10+, for mac 3.11+)
  - nltk
  - flask
  - flask-cors
  - requests
  - mecab-python3 
  - unidic-lite

- Language detection python dependencies (Please install one by one manually):
  - pycld2 or gcld3

- Emacs packages (Not all are needed, some are optional, but paw just supports them. Some needed packages will be installed along with paw):
  - [[https://github.com/lorniu/go-translate][go-translate]] (Needed, for online transalation)
  - [[https://github.com/karthink/gptel][gptel]] (Needed, for ai translation)
  - emacsql (Needed)
  - [[https://github.com/manateelazycat/sdcv][sdcv]] (Needed)
  - [[https://github.com/larstvei/Focus][focus]]
  - svg-lib
  - anki-eidtor
  - all-the-icons
  - nerd-icons
  - immersive-translate
  - ivy
  - consult
  - posframe
  - jieba
  - eldoc-box
  - evil
  - esxml
  - [[https://github.com/chenyanming/shrface][shrface]]
  - [[https://github.com/chenyanming/wallabag.el][wallabag]]
  - [[https://github.com/emacs-eaf/emacs-application-framework][eaf]]
  - [[https://github.com/manateelazycat/popweb][popweb]]
  - pdf-tools
  - elfeed

- Offline Dictionary:
  - [[https://sourceforge.net/projects/stardict-4/][stardict]] dictionaries (Used by sdcv)
  - [[https://github.com/skywind3000/ECDICT][ECDICT]] (Please go into the page and download the stardict.db)
  - [[https://github.com/chenyanming/yomichan-jlpt-vocab][yomichan-jlpt-vocab]] (Please go into the page, clone the repo, and build the japanese.db by yourself)
  - text/csv dictionaries (Not provided by this project, you can easily convert the Anki Deck into csv format and use them. Also, this project also provides some functions to download, check paw-util.el)

Five steps:
1. Install Offline Dictionaries (See above)
2. Install Python
        #+begin_src sh 
        brew install python # You can use pyenv or other tools to install python
        #+end_src
3. Install [[https://pypi.org/project/emacs-paw/][emacs-paw]] command line by the following command, check usage at [[file:README_PAW_CLI.md][README_PAW_CLI]]
        #+begin_src sh
        pip install emacs-paw
        #+end_src
4-1. Please be patient... run the following command lines, you may need to adjust them based on your system, take mac for example:
        #+begin_src sh
        brew install sdcv
        brew install mpv
        pip install edge-tts
        # Language Detection
        pip install pycld2 # install gcld3 on mac is difficult...
        # English
        pip install nltk # not needed if install by pip install emacs-paw
        python -m nltk.downloader stopwords
        python -m nltk.downloader punkt
        python -m nltk.downloader punkt_tab
        # Japanese
        pip install mecab-python3 unidic-lite # not needed if install by pip install emacs-paw
        # paw-server, for mac, please install python 3.11, 3.10 may have segementation fault issue
        pip install flask flask-cors requests # not needed if install by pip install emacs-paw
        #+end_src
4-2. For android install:
        #+begin_src sh
        pkg install tur-repo # https://github.com/termux-user-repository/tur
        pkg install python3.10 # install python 3.10 (newer versions may not work at the time of writing)
        apt update
        apt install protobuf
        pip3.10 install gcld3 
        pip3.10 install flask flask-cors requests # not needed if install by pip install emacs-paw
        #+end_src

Finally, Install paw.el
#+begin_src emacs-lisp
(package! paw :recipe (:host github :repo "chenyanming/paw" :files ("*")))
#+end_src

* Configuration
** Configure paw.el
After installing the above Dependencies, you can configure paw like [[file:config.el][config.el]] (which I may update frequently based on my need). You should better copy to your own configurations and tweak it based on your need.

Please note that csv dictionaries are not provided in this project, you can convert from [[https://ankiweb.net/shared/decks][Anki Decks]] or Make your own, it is just text based dictionaries.

You can also check the language specific configurations below:
- [[file:ENGLISH.org][English Configuration]]
- [[file:JAPANESE.org][Japanese Configuration]]
- [[file:CHINESE.org][Chinese Configuration]]

** Sound engines
Paw includes multiple sound engines that can be used to download audio files. The available sound engines include:
- ~paw-say-word-cambridge~
- ~paw-say-word-oxford~
- ~paw-say-word-jpod101-alternate~
- ~paw-edge-tts-say-word~
- ~paw-youdao-say-word~
- ~paw-say-word-forvo~
- and more
By default, the sequence in which these sound engines are used is defined by ~paw-say-word-functions~. 

** Configure Language Detection
Set ~paw-detect-language-p~ to t, and run ~pip install gcld3~, paw will use gcld3
(may use others tools in the future, check ~paw-detect-language-program~) to
detect the language for more accurate tts pronunciation and translation.

If you don't want to use language detection program, paw use simple ascii rate:
~paw-ascii-rate~ to detect the language, if the rate is greater than
~paw-ascii-rate~, then it is considered as English, otherwise use
~paw-detect-language-program~ to detect the language of the TEXT, if
~paw-detect-language-p~ is t, or return as ~paw-non-ascii-language~ if
~paw-detect-language-p~ is nil.

Setup ~paw-python-program~ if necessary, if the pip module is installed with
different python version, for android, set it to =python3.10=

Supported edge-tts voice:
- ~paw-tts-english-voice~
- ~paw-tts-zh-cn-voice~
- ~paw-tts-zh-tw-voice~
- ~paw-tts-japanese-voice~
- ~paw-tts-korean-voice~
- Other languages: ~paw-tts-multilingual-voice~
Welcome PRs to add more languages :)

** =*paw-view-note*= window configurations
If ~paw-view-note-window-auto-adjust~ is t (default), the window of
=*paw-view-note*= will be automatically adjusted. If the height of the window is
larger than the width, show it on the ~paw-view-note-vertical-position~, otherwise
show it on the ~paw-view-note-horizontal-position~. Also, the windows width/height
could be configured by ~paw-view-note-window-width~ and
~paw-view-note-window-height~.

** Back to original buffer
Normally, when you run ~paw-view-note~, paw will switch to =*paw-view-note*= buffer. But there are some cases we want to stay at the original buffer, in this case:
- Set ~paw-view-note-back-to-original-buffer~ as t (Default)
- And add or remove the targeted major-mode into ~paw-view-note-back-to-original-buffer-supported-modes~.

** Configure Anki Integration
1. PC: Install Anki.
2. PC: Install AnkiConnect, add-on code: 2055492159.
3. Android: Install AnkiDroid from F-Driod (We need it has full media access
   right, so that Emacs can copy audio files to it. Instead of using AnkiConect
   to download the audio, paw will download and cache the audio in
   ~paw-tts-cache-dir~ after the voice is pronounced.).
4. Android: Install [[https://github.com/KamWithK/AnkiconnectAndroid][AnkiconnectAndroid]] 
5. Install [[https://github.com/anki-editor/anki-editor][Anki Editor]] if not installed.
6. If you just want to try or use the default settings. Please download the
   default template [[https://github.com/Eltaurus-Lt/Anki-Card-Templates][Memrise Templates (Lτ) v3.32.apkg]] and import it into anki
   then you are all done.

If you want to use different template,
1. Run ~paw-anki-configure-card-format~ to choose from default templates ~paw-anki-templates~, or configure deck, note type, filed-name, and filed-values one by one temporarily.
    Currently Supported field-value:
   - =word=: the word to learn
   - =exp=: the explanation of the word
   - =sound=: the sound file of the word
   - =note=: the note of the word
   - ~cloze_note~: the note of the word, word is clozed
   - ~cloze_note_exp_hint~: the note of the word, word is clozed, use exp as hint
   - =choices=: the choices of the word
   - =nil=: empty field
   - Other values: the value of the field, it must be a string
2. If you want to make it permanent, set ~paw-anki-deck~, ~paw-anki-note-type~,
   ~paw-anki-field-names~ and ~paw-anki-field-values~ manually in your config,
3. Configure ~paw-online-word-servers~, =(setq paw-online-word-servers '(anki))= to enable anki server, or =(setq paw-online-word-servers '(eudic anki))= to enable both eudic and anki servers.

PS:
All types of annotations (not all are tested) could be added into Anki. Either using ~paw-add-online-word~ (anywhere), or ~paw-anki-editor-push-note(s)~ (dashboard) ~paw-anki-editor-delete-note(s)~ (dashboard).


~paw-anki-editor-delete-note~: Delete note at point to Anki.

~paw-anki-editor-push-note~: Push note at point to Anki.

~paw-anki-editor-push-notes~: Push notes of marked-entries in dashboard to anki,
or push all anki notes in the same origin path (same file or same buffer). Same
file name under ~paw-annotation-search-paths~ is also considerred same origin
path.

~paw-anki-editor-delete-notes~: Delete anki notes of marked-entries in dashboard,
or delete all anki notes in the same origin path (same file or same buffer),
Same file name under ~paw-annotation-search-paths~ is also considerred same
origin path.

Other templates:
- [[https://forums.ankiweb.net/t/memrise-card-template-support-thread/34233/18][MemCloze.apkg]]
- Anime Mining: https://github.com/friedrich-de/Basic-Mining-Deck

The audio file is automatically downloaded and added to the anki note, if ~paw-anki-download-sound~ is t (default). The sound file download sequence are defined by ~paw-anki-download-sound-functions~.

** Configure Eudic Integration
1. Apply Authorization key on https://my.eudic.net/OpenAPI/Authorization, and fill it into ~paw-authorization-keys~ before adding online words.
2. Configure ~paw-online-word-servers~, =(setq paw-online-word-servers '(eudic))= to enable Eudic server, or =(setq paw-online-word-servers '(eudic anki))= to enable both eudic and anki servers.

PS:
Only online words can be added into Eudic. Mainly via command ~paw-add-online-word~

** Configure EAF Integration
Use my forks which add paw support.
- https://github.com/chenyanming/eaf-browser: Able to highlight all words in the database in the page, click to search word and show in paw-view-note buffer.
- https://github.com/chenyanming/eaf-pdf-viewer: Able to search the word under cursor by pressing one key (no need to select the word) and translate the sourrounded sentence, show in paw-view-note buffer.

Add the following bindings to your configuration:
#+begin_src emacs-lisp
(eaf-bind-key insert_or_paw_view_note_in_eaf "s" eaf-browser-keybinding)
(eaf-bind-key paw_view_note_in_eaf "s" eaf-pdf-viewer-keybinding)
#+end_src

** Browser support
*** Browser Extension
1. Firefox & Firefox Android https://addons.mozilla.org/en-US/firefox/addon/emacs-paw
2. Chrome: https://chromewebstore.google.com/detail/paw/ofhodjclfalelhgjbfmdddekoghamlge
3. Brave: Same as Chrome, but need to add ~@@||localhost^~ into ~Create custom filters section~ of ~brave://settings/shields/filters~ if you need paw-server features.
3. This browser extension enhances word interaction by underlining words on mouseover and capturing context when words are clicked. The captured information is sent to Emacs via org-protocol and displayed in the *paw-view-note* buffer.
4. Update the server config inside the config page of the extension, and make sure the port number (~paw-server-port~) matches, for example, http://localhost:5001
5. M-x ~paw-server~. Run the paw-server, so that all words can be highlighted on browser.
6. paw-server is optional, you don't need to run it, and still able to use the org-protocol feature. If you installed paw command line, you can also run paw-server by
        #+begin_src sh
        paw run_server --database /home/damonchan/org/paw.sqlite --save-dir /tmp/ --port 5001 --wallabag-host https://example.com --wallabag-username username --wallabag-password password --wallabag-clientid clientid --wallabag-secret secret
        #+end_src

#+attr_org: :width 1000px
[[file:images/_20250112_161934screenshot.png]]


#+attr_org: :width 300px
[[file:images/_20250112_162205screenshot.png]]


#+attr_org: :width 100px
[[file:images/_20250112_162133screenshot.png]]


*** org-protocol
Add a bookmarklet in browser, paste the following code as URL:
#+begin_src js
javascript:(function(){
    var selection = window.getSelection().toString();
    if (selection.length > 0) {
        var url = encodeURIComponent(window.location.href);
        var title = encodeURIComponent(document.title || "[untitled page]");
        var body = encodeURIComponent(selection);
        var parent = window.getSelection().getRangeAt(0).commonAncestorContainer.parentNode;
        while (parent.nodeType !== Node.ELEMENT_NODE) {
            parent = parent.parentNode;
        }
        var p_tag_parent = parent;
        while (p_tag_parent.tagName !== undefined && p_tag_parent.tagName !== 'P') {
            p_tag_parent = p_tag_parent.parentNode;
        }
        if (p_tag_parent !== document) {
            parent = p_tag_parent;
        }
        var note = encodeURIComponent(parent.textContent || "");
        location.href = 'org-protocol://paw?template=w&url=' + url + '&title=' + title + '&note=' + note + '&body=' + body;
    }
}());
#+end_src
Select the word, and click the bookmark, the word will be shown in paw-view-note buffer.

** Coding
You can show anything on ~*paw-view-note*~ buffer!

For example, the following snippet shows the gptel result to ~*paw-view-note*~ buffer by using ~paw-view-note~ and ~paw-new-entry~ functions, use edge-tts to say the response out, use go-translate to transalte the response, also user can further interact (add to database etc) with the result in ~*paw-view-note*~ buffer.
#+begin_src emacs-lisp
(defun gptel-quick (&optional query)
  "ASK AI with predefined prompts."
  (interactive)
  (require 'gptel)
  (let* ((selected-text (when (use-region-p)
                          (buffer-substring-no-properties (region-beginning) (region-end))))
         ;; (current-buffer-text (buffer-substring-no-properties (point-min) (point-max)))
         (additional-text (or selected-text ""))
         (prompt (completing-read "Ask AI: "
                                  '("Draft an outline"
                                    "Draft anything"
                                    "Draft an email"
                                    "Draft a journal entry"
                                    "Draft a meeting agenda"
                                    "Explain in 12 words or less"
                                    "Explain in 48 words or less"
                                    "Explain in 100 words or less"
                                    "Explain in 200 words or less"
                                    "Write anything"
                                    "Brainstorm ideas"
                                    "Translate it to Chinese"))))
    (when (string= prompt "") (user-error "A prompt is required."))
    (deactivate-mark)
    (setq gptel-last-prompt (format "%s. %s" prompt additional-text))
    (gptel-request (or query gptel-last-prompt)
      :system "You are an AI assistant that lives inside Emacs"
      :callback
      (lambda (response info)
        (if (not response)
            (message "gptel-quick failed with message: %s" (plist-get info :status))
          (with-current-buffer (get-buffer-create "*gptel-quick*")
            (let ((paw-say-word-p t) ;; say the response out
                  (lang (paw-check-language response)))
              (paw-view-note (paw-new-entry response
                                            :origin_type "gptel"
                                            :serverp 3
                                            :lang lang
                                            :context (format "Question: %s\nAnswer: %s" gptel-last-prompt response))
                             :buffer-name paw-view-note-buffer-name
                             :display-func 'switch-to-buffer))))))))
#+end_src

* Database Synchronization
I personally use [[https://syncthing.net/][Syncting]] to share the database between PC and Android. The
drawback is that, if the database is in used in any party, the synchronization
will stop. You can run ~paw-db-sync~ to close the connection with the database, or
run =paw= then =paw-quit=, or close Emacs directly before Synchronization.

* Demos

https://emacs-china.org/uploads/default/original/3X/2/b/2bc2d9fd996827097b13f751c327ad7141376f88.gif

https://emacs-china.org/uploads/default/original/3X/3/5/3544a2bf376d1f3b8f1fc86063af2975e4da42b4.gif

https://emacs-china.org/uploads/default/optimized/3X/b/8/b8d7ae2d68baae4fe7dcb6477998cb761e28165f_2_1234x1000.png

https://emacs-china.org/uploads/default/optimized/3X/b/b/bb28af2a398f8d33861002facc62a6f7782be3b7_2_1232x1000.png

https://emacs-china.org/uploads/default/original/3X/5/5/55c6991c0521c6a70dbbce844ce1fb650119dc1e.png

https://emacs-china.org/uploads/default/original/3X/9/7/971b92c62a837e0a2e053e0e01f02916b8ae465d.png

* User Discussions
https://emacs-china.org/t/paw-el-emacs-lingq/27331

https://t.me/emacs_paw

* References
1. LingQ: Learning a language by reading
2. Kindle Vocabulary Builder
3. org noter
4. Chatgpt
5. SDCV
6. go-translate
7. Eudic
8. 蒙哥阅读器
9. Anki
10. [[https://github.com/themoeway/yomitan][Yomitan]]
11. [[https://github.com/killergerbah/asbplayer/tree/main?tab=readme-ov-file][asbplayer]]
12. [[https://github.com/kha-white/mokuro][mokuro]]
13. [[https://github.com/ninja33/ODH][ODH]]
14. [[https://chromewebstore.google.com/detail/lulu-translate/djbfechcnkppbknmlhfcaoifgnicolin][LuLu Translate]]
15. [[https://chromewebstore.google.com/detail/immersive-translate-trans/bpoadfkcbjbfhfodiogcnhhhpibjhbnh][Immersive Translate]]
